#!/bin/bash

# =============================================================================
# 📊 진행 상황 실시간 업데이터
# update_progress.sh
# 새로운 파일을 추가할 때마다 진행 상황을 업데이트하는 헬퍼 스크립트
# =============================================================================

# 색상 정의
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# 사용법 표시
show_usage() {
    echo -e "${CYAN}=============================================================================${NC}"
    echo -e "${WHITE}📊 진행 상황 업데이터 사용법${NC}"
    echo -e "${CYAN}=============================================================================${NC}"
    echo ""
    echo -e "${YELLOW}기본 사용법:${NC}"
    echo -e "  ./update_progress.sh ${BLUE}[파일경로] [설명]${NC}"
    echo ""
    echo -e "${YELLOW}예시:${NC}"
    echo -e "  ./update_progress.sh src/lib/cue/CueExtractor.ts \"맥락 추출 엔진 완성\""
    echo -e "  ./update_progress.sh src/components/auth/WebAuthnLogin.tsx \"로그인 컴포넌트\""
    echo ""
    echo -e "${YELLOW}기타 명령어:${NC}"
    echo -e "  ./update_progress.sh ${BLUE}status${NC}     # 현재 상태만 빠르게 확인"
    echo -e "  ./update_progress.sh ${BLUE}watch${NC}      # 실시간 모니터링 시작"
    echo -e "  ./update_progress.sh ${BLUE}summary${NC}    # 간단 요약"
    echo -e "  ./update_progress.sh ${BLUE}next${NC}       # 다음 할 일 추천"
    echo ""
}

# 간단 상태 확인
quick_status() {
    if [ ! -f "./track_complete_progress.sh" ]; then
        echo -e "${YELLOW}⚠️  메인 추적 스크립트가 없습니다. 먼저 track_complete_progress.sh를 생성하세요.${NC}"
        return 1
    fi
    
    # 기본 통계만 빠르게 계산
    local total_files=0
    local completed_files=0
    
    # 핵심 파일들만 체크
    declare -a core_files=(
        "src/lib/config/index.ts"
        "src/auth/webauthn/client.ts"
        "src/lib/cue/CueExtractor.ts"
        "src/types/cue.ts"
        "src/database/supabase/client.ts"
        "src/app/page.tsx"
        "src/app/layout.tsx"
    )
    
    echo -e "${BLUE}🚀 빠른 상태 확인${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    for file in "${core_files[@]}"; do
        total_files=$((total_files + 1))
        if [ -f "$file" ] && [ $(wc -c < "$file" 2>/dev/null || echo "0") -gt 100 ]; then
            echo -e "${GREEN}✅${NC} $file"
            completed_files=$((completed_files + 1))
        else
            echo -e "${YELLOW}⏳${NC} $file"
        fi
    done
    
    local percentage=$((completed_files * 100 / total_files))
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${WHITE}핵심 파일 진행률: ${GREEN}$completed_files${NC}${WHITE}/$total_files (${percentage}%)${NC}"
}

# 파일 추가 알림
add_file_notification() {
    local file_path=$1
    local description=$2
    
    if [ -f "$file_path" ]; then
        local size=$(wc -c < "$file_path" 2>/dev/null || echo "0")
        echo -e "${GREEN}🎉 파일 추가 완료!${NC}"
        echo -e "   📁 파일: ${CYAN}$file_path${NC}"
        echo -e "   📝 설명: $description"
        echo -e "   📊 크기: ${size} bytes"
        echo -e "   ⏰ 시간: $(date '+%H:%M:%S')"
        
        # 메인 추적기 실행해서 업데이트된 상태 확인
        echo -e "\n${BLUE}📊 업데이트된 전체 상황:${NC}"
        if [ -f "./track_complete_progress.sh" ]; then
            ./track_complete_progress.sh | tail -10
        else
            echo -e "${YELLOW}⚠️  메인 추적 스크립트를 실행하여 전체 상황을 확인하세요.${NC}"
        fi
        
        # Git 추가 제안
        echo -e "\n${YELLOW}💡 Git에 추가하시겠습니까?${NC}"
        echo -e "   git add $file_path"
        echo -e "   git commit -m \"Add: $description\""
        
    else
        echo -e "${YELLOW}⚠️  파일이 존재하지 않습니다: $file_path${NC}"
        echo -e "   파일을 먼저 생성한 후 다시 실행해주세요."
    fi
}

# 다음 할 일 추천
suggest_next_tasks() {
    echo -e "${BLUE}🎯 다음 할 일 추천${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    # 우선순위별 미완성 파일들 체크
    declare -a priority_files=(
        "src/lib/cue/CueExtractor.ts:🧠 Cue 추출 엔진 (시스템 핵심!)"
        "src/lib/cue/PlatformSyncManager.ts:🔄 플랫폼 동기화"
        "src/lib/cue/CueApplicationEngine.ts:🎯 Cue 적용 엔진"
        "src/types/cue.ts:📋 Cue 타입 정의"
        "src/auth/webauthn/client.ts:🔐 WebAuthn 클라이언트"
        "src/app/api/webauthn/authenticate/begin/route.ts:🔑 인증 시작 API"
        "src/app/api/webauthn/authenticate/complete/route.ts:✅ 인증 완료 API"
        "src/components/auth/WebAuthnLogin.tsx:🎨 로그인 컴포넌트"
        "src/components/auth/WebAuthnRegister.tsx:📝 회원가입 컴포넌트"
        "src/database/migrations/001_initial_schema.sql:🗄️ 데이터베이스 스키마"
    )
    
    local task_number=1
    for item in "${priority_files[@]}"; do
        IFS=':' read -ra PARTS <<< "$item"
        local file_path="${PARTS[0]}"
        local description="${PARTS[1]}"
        
        if [ ! -f "$file_path" ] || [ $(wc -c < "$file_path" 2>/dev/null || echo "0") -le 100 ]; then
            echo -e "  ${task_number}️⃣ $description"
            echo -e "     📁 ${CYAN}$file_path${NC}"
            task_number=$((task_number + 1))
            
            if [ $task_number -gt 5 ]; then
                break
            fi
        fi
    done
    
    if [ $task_number -eq 1 ]; then
        echo -e "  🎉 ${GREEN}모든 우선 작업이 완료되었습니다!${NC}"
        echo -e "     이제 다음 단계로 진행하세요:"
        echo -e "     • npm run dev (개발 서버 실행)"
        echo -e "     • 기능 테스트 및 디버깅"
        echo -e "     • 추가 UI 컴포넌트 개발"
    fi
}

# 요약 보고서
generate_summary() {
    echo -e "${BLUE}📊 프로젝트 진행 요약${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    if [ -f ".progress-status.json" ]; then
        # JSON에서 정보 추출 (간단한 방법)
        local overall_progress=$(grep -o '"overallProgress": [0-9]*' .progress-status.json | grep -o '[0-9]*')
        local timestamp=$(grep -o '"timestamp": "[^"]*"' .progress-status.json | cut -d'"' -f4)
        
        echo -e "⏰ 마지막 업데이트: ${timestamp}"
        echo -e "📈 전체 진행률: ${overall_progress}%"
        
        # 섹션별 진행률 (간단히)
        local cue_progress=$(grep -o '"cue": [0-9]*' .progress-status.json | grep -o '[0-9]*')
        local webauthn_progress=$(grep -o '"webauthn": [0-9]*' .progress-status.json | grep -o '[0-9]*')
        local ui_progress=$(grep -o '"ui": [0-9]*' .progress-status.json | grep -o '[0-9]*')
        
        echo -e "🧠 Cue 시스템: ${cue_progress}%"
        echo -e "🔐 WebAuthn: ${webauthn_progress}%"
        echo -e "🎨 UI 컴포넌트: ${ui_progress}%"
    else
        echo -e "${YELLOW}⚠️  진행 상황 파일이 없습니다. 메인 추적기를 먼저 실행하세요.${NC}"
    fi
    
    echo -e "\n${GREEN}🚀 빠른 실행 명령어:${NC}"
    echo -e "   ./track_complete_progress.sh     # 전체 상황 확인"
    echo -e "   ./update_progress.sh next        # 다음 할 일"
    echo -e "   npm run dev                      # 개발 서버 시작"
}

# =============================================================================
# 메인 실행 로직
# =============================================================================

case "$1" in
    "status")
        quick_status
        ;;
    "watch")
        echo -e "${BLUE}🔄 실시간 모니터링 시작...${NC}"
        echo -e "${YELLOW}Ctrl+C로 중지${NC}"
        watch -n 10 './update_progress.sh status'
        ;;
    "summary")
        generate_summary
        ;;
    "next")
        suggest_next_tasks
        ;;
    "")
        show_usage
        ;;
    *)
        if [ -n "$1" ] && [ -n "$2" ]; then
            # 파일 추가 모드
            add_file_notification "$1" "$2"
        else
            echo -e "${YELLOW}⚠️  파일 경로와 설명을 모두 입력해주세요.${NC}"
            show_usage
        fi
        ;;
esac